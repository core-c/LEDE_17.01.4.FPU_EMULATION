
copy de SETUP directory naar de locatie waarin de LEDE-build komt, bv. /usr/src/LEDE_v17.04.1
je krijgt dan een /usr/src/LEDE_v17.04.1/SETUP/ met daarin alle configs en patches om een
vers gedownloade LEDE 17.01.4 te kunnen compileren met een FPU_EMULATION kernel,
en een werkende firmware & sysupgrade te produceren.

copy de build.sh file naar de hoofd directory
(waarin de LEDE source komt/is: in ons geval "/usr/src/LEDE_v17.04.1"),
en run ./build.sh


alle stappen van de crosscompile staan hieronder vermeld.
ik heb een build.sh script gemaakt wat alles zou moeten automatiseren, maar niets is getest.
build.sh maakt zelf backups van: de huidige config files, en van een uiteindelijk geslaagde compile config.


!!!LET OP
build.sh is nog niet getest!!!!

   
   * opties voor build.sh:
          ./build.sh
          ./build.sh -1        make -j1
          ./build.sh -4        make -j4
          ./build.sh -v        make -j1 V=s

build.sh doet alles.. /zou_moeten_doen:
   * download de LEDE source code, als die nog niet aanwezig is
   * setup directories (tbv. backups,downloads,configs)
   * copy UJE_YUN config files naar de juiste locaties
   * compileer de UJE_YUN firmware
   * clean up wat onnodige bestanden




		  
#======================================================================================
# Dit zijn de stappen om handmatig een cross-compile te maken
#======================================================================================

# de git LEDE source code downloaden

mkdir LEDE_v17.04.1
cd LEDE_v17.04.1
git clone --depth=1 --branch v17.01.4 --single-branch https://git.lede-project.org/source.git


cd source



# de directory aanmaken voor bestanden die uiteindelijk op de target worden geplaatst..
# .. en copy alle yun specifieke bestanden naar "files"..

mkdir files
cp -R ../SETUP/files/* files/*



# copy de bestanden (met configuratie aanpassingen), uit de ../SETUP/ directory. naar hun locaties:

cp ../SETUP/source____.config .config
cp ../SETUP/source____feeds.conf.default feeds.conf.default
cp ../SETUP/source_target_linux_ar7_image____Makefile target/linux/ar7/image/Makefile
cp ../SETUP/source_target_linux_ar71xx____config-4.4 target/linux/ar71xx/config-4.4
cp ../SETUP/source_target_linux_ar71xx_generic_profiles____uje_yun.mk target/linux/ar71xx/generic/profiles/uje_yun.mk
cp ../SETUP/source_target_linux_ar71xx_image____generic.mk target/linux/ar71xx/image/generic.mk
cp ../SETUP/source_target_linux_ar71xx_image____legacy.mk target/linux/ar71xx/image/legacy.mk
cp ../SETUP/source_target_linux_ar71xx_image____legacy-devices.mk target/linux/ar71xx/image/legacy-devices.mk

# volgens mij zijn deze 2 niet eens nodig: Makefile & uje_yun.mk
# Die 2 waren tests om een goede luci-sysupgrade te krijgen.. maar dat gaat toch nog steeds niet.



make kernel_menuconfig
make menuconfig
# exit meteen weer..



make


# de vers ge-cross-compileerde staat nu in:  <path_to>LEDE_v17.04.1/source/bin/targets/ar71xx/generic/*

# De losse kernel en rootfs flashen, kan pas nadat een nieuwere bootloader, u-boot, is geflashed.
# De nieuwere bootloader is nodig omdat de standaard Yun bootloader geen "saveenv" command kent,
# waardoor het niet mogelijk is om de u-boot-env (environment variables) aan te passen (en op te slaan).
